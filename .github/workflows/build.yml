name: OpenWrt-AutoBuild

on:
  repository_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    name: Build ${{matrix.target}}
    env:
      REPO_URL: https://github.com/openwrt/openwrt.git
      UPLOAD_BIN_DIR: false
      UPLOAD_FIRMWARE: true
      UPLOAD_COWTRANSFER: false
      UPLOAD_WETRANSFER: false
      OP_TARGET: ${{matrix.target}}
    strategy:
      fail-fast: false
      matrix:
        target: ["${{github.event.client_payload.target}}"]

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo timedatectl set-timezone Asia/Chongqing
        sudo rm -rf /etc/apt/sources.list.d/* /opt/ghc /usr/local/lib/android /usr/share/dotnet
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean

    - name: SSH connection to Actions
      uses: yIwIoTT9A21nupT/debugger-action@master
      if: contains(github.event.action,'ssh')

    - name: Clone source code
      run: |
        df -hT $PWD
        git clone $REPO_URL openwrt

    - name: Update feeds
      run: |
        cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        echo "Clone Openwrt Custom"
        git clone -q ${{secrets.OP_GIT}} Openwrt_Custom
        cp -r Openwrt_Custom/* ./
        chmod +x diy.sh && ./diy.sh

    - name: Download package
      id: package
      run: |
        cd openwrt
        rm -rf staging_dir tmp
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(($(nproc)+1)) thread compile"
        make -j$(($(nproc)+1)) || make -j1 V=s
        grep -q 'CONFIG_TARGET_x86=y\|CONFIG_TARGET_armvirt=y' .config && grep '^CONFIG_ARCH=' .config | sed -r 's/.*"(.+)".*/\1/' > DEVICE_NAME || grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && ([ $(cat DEVICE_NAME) = phicomm_k2p ] && echo "DEVICE_NAME=_${OP_TARGET,,}" >> $GITHUB_ENV || echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV)
        echo "VERSION=_$(sed '/^DISTRIB_RELEASE=/!d;s/.*=//' package/base-files/files/etc/openwrt_release | sed "s/'//g" | awk '{print $1}')" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y-%m-%d")" >> $GITHUB_ENV
        echo "::set-output name=status::success"

    - name: Check space usage
      if: steps.compile.outputs.status == 'success'
      run: df -hT $PWD

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{env.DEVICE_NAME}}${{env.VERSION}}${{env.FILE_DATE}}
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true'
      run: |
        cd openwrt/bin/targets/*/*
        [ $OP_TARGET = N1 ] && find ! -name '*rootfs*' ! -name '.' | xargs rm -rf || (rm -f *rootfs*;find ! -name '*squashfs*' ! -name '.' | xargs rm -rf)
        [ $OP_TARGET = N1 ] && for i in $(ls | grep rootfs);do mv $i "openwrt-${VERSION#*_}-${DEVICE_NAME#*_}.${i#*.}";done || [ $OP_TARGET != MI-AC2100 -a $OP_TARGET != REDMI-AC2100 -a $OP_TARGET != CR660X ] && for i in $(ls | grep squashfs);do mv $i "openwrt-${VERSION#*_}-${DEVICE_NAME#*_}-$(echo $i | grep -o squashfs-*.*)";done
        [ $OP_TARGET = MI-AC2100 -o $OP_TARGET = REDMI-AC2100 ] && find ! -name '*breed*' ! -name '*sysupgrade*' ! -name '.' | xargs rm -rf && for i in $(ls);do mv $i "openwrt-${VERSION#*_}-${DEVICE_NAME#*_}-$(echo $i | grep -o squashfs-*.*)";done
        [ $OP_TARGET = CR660X ] && find ! -name '*factory*' ! -name '*sysupgrade*' ! -name '.' | xargs rm -rf && for i in $(ls);do mv $i "openwrt-${VERSION#*_}-${DEVICE_NAME#*_}-$(echo $i | grep -o squashfs-*.*)";done
        echo "IP:10.0.0.1" > "默认IP与sha256.txt"
        echo "" >> "默认IP与sha256.txt"
        sha256sum openwrt* >> "默认IP与sha256.txt"
        find ../../../packages/*/packages -maxdepth 1 -name 'dockerd*' -type f | xargs -i cp {} $PWD
        [ "$(cat ../../../../DEVICE_NAME)" = phicomm_k2p ] && cp ../../../packages/*/base/xray* $PWD && cp ../../../packages/*/packages/xray* $PWD
        mkdir -p $(echo $OP_TARGET | sed -e 's/REDMI-AC2100/Redmi-AC2100/' -e 's/MI-AC2100/Mi-AC2100/')/${VERSION#*_}
        find -type f | xargs -i mv {} $(echo $OP_TARGET | sed -e 's/REDMI-AC2100/Redmi-AC2100/' -e 's/MI-AC2100/Mi-AC2100/')/${VERSION#*_}
        tar cf OpenWrt_firmware$DEVICE_NAME$VERSION$FILE_DATE.tar *
        find -maxdepth 1 ! -name '.' -type d | xargs rm -rf
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=status::success"

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{env.DEVICE_NAME}}${{env.VERSION}}${{env.FILE_DATE}}
        path: ${{env.FIRMWARE}}

    - name: Upload firmware to CowTransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
      run: |
        curl -m 9 --retry 3 -fsSL git.io/file-transfer | sh
        ./transfer cow --block 2621440 -s -p 64 --no-progress $FIRMWARE 2>&1 | tee cowtransfer.log
        echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"

    - name: Upload firmware to WeTransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
      run: |
        curl -m 9 --retry 3 -fsSL git.io/file-transfer | sh
        ./transfer wet -s -p 16 --no-progress $FIRMWARE 2>&1 | tee wetransfer.log
        echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"

    - name: Telegram notification
      env:
        TG_ID: ${{secrets.TG_ID}}
        TG_KEY: ${{secrets.TG_KEY}}
      if: env.TG_ID && env.TG_KEY
      continue-on-error: true
      run: |
        curl -m 9 --retry 3 -Ssd "chat_id=$TG_ID&text=OpenWrt_firmware$DEVICE_NAME$VERSION$FILE_DATE $([ "${{steps.compile.outputs.status}}" = success ] && echo 编译成功 || echo 编译失败)" https://api.telegram.org/bot$TG_KEY/sendMessage >/dev/null
